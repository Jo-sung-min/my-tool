[JSP06]

1. 세션 Session
	: 클라이언트와 웹 서버간의 상태를 지속적으로 유지하는 방법
	세션 :웹서버쪽의 웹 컨테이너에 정보를 저장(서버측 사용자 정보 보관소)
 	쿠키 : 웹브라우저에 사용자 정보를 저장(클라이언트측 사용자 정보 보관소)


	서버는 세션을 사용해서 클라이언트 상태를 유지할 수있기 때문에 주로  로그인한 
	사용자 정보를 유지하기 위한 목적으로 많이 사용된다.
	세션은 웹서버에서만 접근이 가능하므로 브라우저와 서버의 상태 유지가 훨씬 안정적이고
	보안 유지에 더 유리하다.
	간혹 , 웹브라우저에서 쿠키를 지원하지 않을 경우나 강제적으로 쿠키를 막는경우 세션은 상관없이 사용가능.
	하지만, 세션은 여러 서버에서 공유할 수 없다.
	
	웹컨테이너에는 세션 컨테이너가 존재하며, 기본적으로 한 웹브라우저 마다
	한 세션을 생성하여, 사용자 구분 단위가 됨
	한 브라우저에서 여러 jsp 페이지를 사용해도 하나의 세션을 사용,
	같은 페이지라도 브라우저에 따라 서로다른 세션을 사용.

	세션을 사용하면 클라이언트가 웹 서버의 세션에 의해 가상으로 연결된 상태가 되며, 
	웹브라우저를 닫기 전까지 웹 페이지를 이동하더라도 사용자의 정보가 
	웹서버에 보관되어있어 사용자 정보를 잃지 않는다.

	JSP 페이지에서는 세션기능을 사용할 수 있도록 session 내부객체를 제공한다.
	
	* session 내부객체 메서드 
	Object 		getAttribute(String name)			
			// 세션에 저장된 속성명이 name 인 값을 Object 로 리턴
	void		setAttribute(String name, Object value)	
			// 세션에 name 송성명으로 값 저장 (어떤값이든 저장가능)
			-> 브라우저가 종료되거나 , 삭제할때까지는 데이터 유지
	void 		removeAttribute(String name)
			// 속성명이 name 인속성셋을 삭제
	void		invalidate()
			// 현재 세션에 저장된 모든속성 제거
	java.util.Enumerration	getAttributeNames()
				: 세션 속성명들을 Enumeration 으로 리턴
	long			getCreationTime()
				: 세션이 생성된 시간 리턴
	long			getLastAccessedTime()
				: 웹 브라우저가 해당 세션에 마지막으로 접근한 시간 리턴
	int			getMaxInactiveInterval()
				: 해당 세션을 유지하기 위한 세션 유지시간 리턴
	void			setMaxInactiveInterval(int interval)
				: 해당 세션을 유지하기 위한 세션 유지시간 초단위로 설정
				default 1800 초 (30 분)
	
	1) 세션 내부 객체
		session 내부 객체는 request 내부객체와 마찬가지로
		setAttribute(), getAttribute() 등 메서드를 사용할 수 있다.
		웹 브라우저마다 별도의 세션을 갖는다 했는데, 이러한 각 세션을 구분하기 위해
		세션마다 고유 ID를 할당하는데, 이를 세션 ID 라고 한다.
		웹 서버는 웹브라우저에 세션ID를 기본적으로 전송,
		웹 브라우저는 웹서버에 연결할때마다 매번 세션 ID 를 보내서 
		서버가 어떤 세션을 사용할지 판단할 수 있게 한다.

		웹서버와 웹브라우저는 세션 ID를 공유해야하는데
		이를 위해 사용하는것이 쿠키이다.
		쿠키 목록중에 JSESSIONID인 쿠키가 세션 ID공유할떄 사용하는 쿠키이다.	

	2) 세션 생성
		JSP에서 내부객체로 제공되므로 객체생성없이 바로사용가능
		
			

2. 쿠키 Cookie
	쿠키는 상태가 없는 프로토콜을 위해 상태를 지속시키기 위한 방법
	웹브라우저(클라이언트)의 정보를 웹브라우저에 저장하므로,
	이 후 서버로 전송되는 요청에는 쿠키가 가지고 있는 정보가 같이 포함되서 전송된다.
	이 때 웹 서버는 웹 브라우저의 요청에 포함되어 있을 쿠키를 읽어서,
	새로운 웹브라우저인지 이전에 요청했던 웹브라우저인지 판단할 수 있다.
	
	쿠키는 웹브라우저가 보관하는 데이터	
	웹 사이트에 접속할때 생성되는 정보를 담은 임시파일.
	일반적으로 4kb 이하 크기로 생성. 1바이트 문자로 현재 모든 상태를 전산에 기록
	원래 사이트에 접속한 사용자의 정보를 유지, 쉽게 접속하기 위해 만들어짐.
	ex) 자동 로그인 , 로그인상태 유지
		비번, 아이디 저장 팝업

	*쿠키의 2가지 방식
	파일 쿠키	:  실제 파일로 남겨서 저장하는 방식
	웹 쿠키		:  브라우저가 관리. 

	* 쿠키는 해당 클라이언트의 브라우저에 정보가 저장되는데
		아이디, 패스워드, 브라우저 정보,  ip , 시간등 저장된다.
	* 쿠키 제약사항
		문자열 데이터만 저장가능
		4kb 이상의 공간을 차지

	1) 동작방식
		쿠키는 웹 서버와 브라우저 양쪽에서 생성가능

		브라우저 			웹서버
		[쿠키저장소]
		-------------------------------------------------------
		1. 요청 -------------------------> 
			<---------------------------응답 2 (쿠키생성)
				(쿠키)
		-------------------------------------------------------
		3. [쿠키저장소]
		쿠키저장
		-------------------------------------------------------
				(쿠키)
		4. 요청 ---------------------->
			<---------------------------응답 5 (쿠키 읽어들임)

		-------------------------------------------------------


	2) 쿠키의 구성

		이름		: 각 쿠키를 구별하는데 사용되는 이름. 알파벳, 숫자이용,
		값		: 쿠키의 이름과 같이 저장할 데이터
		유호시간		: 쿠키가 유지되는 시간
		도메인		: 쿠키를 전송할 도메인
		경로		: 쿠키를 전송할 요청 경로
		
		하나의 브라우저는 여러개의 쿠키를 가질 수 있고,
		구분할때 이름을 사용.
		각 쿠키는 값을 가지며, 서버는 이 값을 사용해 작업 수행
		
	3) 쿠키 생성
		쿠키를 사용하려면 Cookie 클래스를 사용하여 쿠키 객체를 생성해야함.
		쿠키에는 각 웹 브라우저를 판별할 수 있는 정보가 포함되어있음.
		서버가 응답할때, response 객체에 실려 사용자 브라우저에 저장됨.
		정보전달 방식은 Map(key, value) 형태이다.

		[ 쿠키 객체 생성 ] 
		Cookie cookie = new Cookie(String name, String value);
		[ 쿠키 유효기간 설정 ] ([ 도메인,path 도 설정 ])
		cookie.setMaxAge(60);
		
		[ response 객체에 쿠키 추가 ]
		response.addCookie(cookie)		;

		name: 쿠키이름
		value : 쿠키 값

		* 쿠키 생성후 , 반드시 response 객체에 쿠키를 추가해야 한다.
		* value 에 아스키 코드가 아닌 값이 들어가야 할때는 알맞은 방식으로 인코딩 한다.
		
		* 쿠키 클래스 메서드
		String 		getName()			: 쿠키 이름 가져오기
		String 		getValue()			: 쿠키 값 가져오기
		void		setValue(String value)		: 쿠키값 지정
		void 		setDomain(String pattern)		: 이 쿠키가 전송될 서버의 도메인 지정
		String 		getDomain()			: 지정된 도메인 리턴
		void 		setPath(String url)			: 이 쿠키를 전송할 경로 지정
		String 		getPath()				: 지정된 경로 리턴
		void 		setMaxAge(int expiry)		: 쿠키 유효시간을	초단위로 지정.
								 음수로 입력할 경우 웹브라우저를 닫을때
								 쿠키가 함께 삭제된다.
		int 		getMaxAge()			: 쿠키 유효시간을 구함.

		 

	4) 쿠키 읽어오기
		
		#1. 쿠키 목록 얻기
		존재하는 모든 쿠키 객체를 가져오려면
		내장객체 request의 getCookies() 메서드를 사용하면됨.
		Cookie[] cookies = request.getCookies();
		
		#2. 쿠키 객체 정보 얻기
			getName(), getValue() 이용해서 정보얻어야함.


	5) 쿠키 삭제
		쿠키는 삭제하는 기능을 별도로 제공하지 않고, 
		쿠키 유효시간을 만료하면 삭제됨.
		즉, setMaxAge(0) 으로 만들어 다시 저장되도록 응답으로 보내기

	




로그인 데이터 짜임 순서
1.form.jsp 생성 회원가입 시킬때 받고싶은 데이터 웹상에 뿌려주기 데이터 받아서 pro로 이동
2.pro.jsp 로그인 완료 페이지 넘어온 데이터들을 받아서 만들어 놓은 dao 안에 idpwcheck를 이용해
	아이디 비번 맞는지 확인 맞으면 main으로 넘어가고 틀리면 form으로 다시감
	
3.main.jsp 로그인인지 비로그인인지 확인하고 로그인이면 로그아웃 버튼 보이게 비로그인이면 로그인 버튼 뿌려줌
로그인 누르면 다시 form 갈수있게 로그아웃 누르면 logout 갈수있게 버튼만들기
4.logout  로그아웃 처리 해주고(세션에서 sid 속성 삭제하기) main으로 돌려보내기




















